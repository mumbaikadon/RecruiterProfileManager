{"id":46,"jobId":8,"candidateId":53,"recruiterId":1,"status":"New","matchScore":85,"agreedRate":70,"submittedAt":"2025-05-06T03:54:49.563Z","updatedAt":"2025-05-06T03:54:49.530Z","notes":"","feedback":null,"isSuspicious":true,"suspiciousReason":"Identical job chronology with another candidate","suspiciousSeverity":"HIGH","lastUpdatedBy":null,"job":{"id":8,"jobId":"JOb159","title":"Java Developer","description":"Job Description:\n- 5-8 years of experience in Object Orient Programming Languages (Java 8/JVM, nodejs)\n- Experience in designing both Front end & Backend applications using, J2EE, JDBC3.0, JSF 2,JSP and EJB3\n- Experience in HTML5, Prime faces\n- Experience with Relational Databases(Oracle 19), SQL/PLSQL and ORM technologies (JPA2, eclipse link 3.1)\n- Good to have experience with JavaScript Front-end framework (reactjs/Angular)\n- Experience in code hosting platform for version control and collaboration (GitHub)\n- Experience with Web Services (SOAP, restful (JAX-RS)), Unix Shell scripting, F5 bolt Authentication\n- Manage the day-to-day activities of the scrum team within an Agile/Scrum environment\n- Experience in using JIRA software for issue tracking and project management","status":"active","createdAt":"2025-05-03T15:28:35.208Z","createdBy":1},"candidate":{"id":53,"firstName":"sima","middleName":"","lastName":"vuuuu","dobMonth":7,"dobDay":29,"ssn4":"8178","location":"Dallas, TX","email":"rkdlos41122255h@gmail.com","phone":"2143566789","linkedIn":"","workAuthorization":"citizen","isUnreal":false,"unrealReason":null,"lastValidated":null,"validatedBy":null,"createdAt":"2025-05-06T03:54:49.149Z","createdBy":1},"recruiter":{"id":1,"username":"admin","password":"admin123","name":"Admin User","email":"admin@example.com","role":"admin","createdAt":"2025-04-28T04:30:59.962Z"},"resumeData":{"id":44,"candidateId":53,"clientNames":["UST GLObal","SOMOS","AutoZone","US Bank","Toyota","HDS"],"jobTitles":["Senior Software Developer","Lead Java Developer","Senior Java Developer","Senior Full Stack Java Developer","Java Developer","Software Developer"],"relevantDates":["March 2024-Present","Sep 2023 - Feb 2024","Jan 2020 – Aug 2023","June 2017 – Dec 2019","Jan 2015 – May 2017","June 2012 – Dec 2014"],"skills":[],"education":[],"extractedText":"Laksth ehteam\n\nPROFESSIONAL SUMMARY:\n\n\n\nSkilled Full Stack developer, with a focus on creating various web and client/server applications using Java/J2EE technologies.\n\nInvolved in the entire Software Development Life Cycle (SDLC) across Healthcare, Banking, and E-Commerce sectors.\n\nProficient in Java development, including Microservices, Spring Boot, Hibernate, and REST API.\n\nCapable of integrating Terraform with Ansible and Chef for managing AWS infrastructure.\n\nProficient in creating web UI applications with expertise in HTML5, CSS3, Bootstrap, JavaScript, TypeScript, Ajax, jQuery, Angular.js, React.js, Express.js, Node.js, and Spring MVC.\n\nPossess a strong understanding of Microservices, Domain Driven Design (DDD), and Test-Driven Architecture (TDD).\n\nExperienced in utilizing OAuth2.0 for authentication and authorization of Rest services.\n\nSkilled in formulating strategies and implementing AWS cloud-specific technologies, such as S3, VPC, RDS, SQS, SNS, CloudFront, CloudFormation, ElastiCache, CloudWatch, Redshift, Lambda, and DynamoDB.\n\nKnowledgeable about Snowflake cloud data warehouse and AWS S3 for data integration.\n\nDeveloped RESTful web services using JSON and XML formats, established Continuous Delivery pipelines, and contributed to Spring Controllers and UI Integration.\n\nExpert in web development employing HTML/HTML5, CSS/CSS3, Bootstrap, JavaScript, jQuery, Angular, NodeJS, and ReactJS.\n\nProficient in navigating various operating systems such as Windows and UNIX/Linux.\n\nUtilized a variety of databases such as MongoDB, SQL Server, Postgres, and DynamoDB.\n\nProficient in Kafka, integrating it with AWS monitoring and management services like CloudWatch for message throughput and cluster health monitoring.\n\nEmployed AWS S3 for storage and managed its lifecycle configurations.\n\nSkilled in TSQL scripting, AWS management, and utilizing JMS for asynchronous messaging.\n\nHands-on experience with Jenkins, Snowflake utilities, and AWS Lambda functions.\n\nCollaborated with Amazon Services, adhering to Agile methodologies, and utilizing Kubernetes for team coordination.\n\nProficient in monitoring tools such as Grafana, New Relic APM, Splunk, and ELK.\n\nManaged AWS resources via AWS-CLI, worked with databases like Oracle and MongoDB, and utilized IDEs such as Eclipse and IntelliJ.\n\nExpertise with version control systems like Git, SVN, and GitLab, and testing frameworks such as Junit and Mockito.\n\nLeveraged issue tracking tools like JIRA and RADAR for agile project management.\n\nFollowed Agile scrum methodology with two-week iterations.\n\nPROFESSIONAL EXPERIENCE:\n\n\n\nClient: UST GLObal, Costa Mesa, CA\t                                                                                              March 2024-Present                                                                                            \n\nRole: Senior Software Developer\n\nCollaborated with product owners to gather requirements, define application capabilities, and outline testing scenarios.\n\nArchitected end-to-end solutions and led the development of Java-based applications tailored to specific business needs.\n\nEngineered a high-volume messaging platform with message masking, encryption, and monitoring, leveraging Kafka for event streaming and Cassandra for data storage.\n\nExperienced in designing and optimizing database schemas in PostgreSQL to support Java-based applications.\n\nDeveloped microservices using Spring Boot and Spring Security, deployed them on AWS, and configured AWS CLI for managing services via SHELL/BASH scripting.\n\nProficient in applying Java 21 features such as pattern matching, record types, and sealed classes to write clean, maintainable code.\n\nImplemented Spring Batch for large-scale data processing in UHG subsidiaries, orchestrating ETL workflows for efficient data extraction, transformation, and loading.\n\nMonitored and resolved CI/CD issues, ensuring smooth release cycles from development to production.\n\nMerged source code across Develop, Release, and Master branches for patient record projects.\n\nBuilt Jenkins plugins to integrate with AWS, automated CI/CD pipelines, and onboarded new projects through DevOps automation.\n\nUpgraded legacy Java applications to Java 21, ensuring smooth transitions and improved performance with modern JVM enhancements.\n\nFollowed Agile methodology, participating in 3-week sprints and demonstrating progress in UI designs during daily scrums.\n\nApplied query optimization techniques and indexing strategies to enhance the performance of PostgreSQL databases in high-demand environments.\n\nDesigned and developed RESTful APIs to retrieve JSON documents from MongoDB and serve them to clients.\n\nAutomated microservices builds using Jenkins pipelines, deployed them to Kubernetes, and managed Pods for containerized applications.\n\nMigrated on-premises databases and deployments to AWS, leveraging DynamoDB, EC2, and ELB for load balancing.\n\nCreated microservices with Spring Boot, leveraging dependency injection, auto-configuration, and embedded containers for modern distributed architectures.\n\nIntegrated AWS Glue with S3, Redshift, and Athena for data integration and analytics.\n\nConverted CloudFormation templates to Terraform, secured state files in S3, and executed Terraform plans to manage infrastructure changes.\n\nUtilized Java 21’s performance enhancements to develop high-performing, large-scale applications.\n\nConfigured and maintained CI/CD pipelines using Jenkins for automated builds and releases.\n\nDeveloped Maven scripts and utilized build tools like Maven alongside continuous integration servers such as Jenkins.\n\nImplemented Struts framework with JSP, HTML, CSS, and JavaScript for dynamic web applications.\n\nOptimized backend services using Spring Boot, leveraging Spring Data for database operations and Spring Security for HIPAA compliance.\n\nConducted testing and provided production support for a multithreading ETL tool, loading XML data into Oracle with JPA/Hibernate.\n\nDeveloped micro-applications using React.js, Node.js, and npm, facilitating seamless server communication via HTTP requests.\n\nBuilt and optimized microservices using Java 21, taking advantage of its new APIs and concurrency improvements for enhanced scalability.\n\nWrote SQL queries and managed PL/SQL stored procedures, triggers, and packages in Oracle databases.\n\nImplemented Test-Driven Development (TDD) in Agile environments, creating JUnit test cases for high code coverage.\n\nExposed Redis cache data through RESTful endpoints to enhance application performance.\n\nLed application development on AWS, utilizing services such as EC2, CloudWatch, Redshift, S3, CloudSearch, ELB, and CloudFormation.\n\nSkilled in using Helm to streamline the management and deployment of applications on Kubernetes.\n\nEngineered a Java 18-based web application for enterprise server monitoring and disaster recovery.\n\nUpdated Terraform modules, resolved version conflicts, and deployed AWS stacks using CloudFormation.\n\nDeveloped reusable TypeScript components for API interactions within a React-based architecture.\n\nManaged Agile projects using JIRA and Confluence, tracking progress and ensuring organization.\n\nAutomated regression testing across five projects, achieving 100% coverage in one.\n\nBuilt fully automated Jenkins CI/CD pipelines, detecting jobs from Git repositories and executing within Docker containers on ECS.\n\nDesigned and implemented RESTful web services using Java, Spring, and Hibernate, deploying them on Tomcat and WebSphere.\n\nUtilized Java 21’s performance enhancements to develop high-performing, large-scale applications.\n\nDeveloped RESTful APIs with TypeScript in Node.js, implementing strong typing for request/response objects.\n\nIntegrated SOAP and REST web services with Java, processing XML/XSD/XSLT for seamless DB2 and Oracle transactions.\n\nOptimized SQL and PL/SQL queries for Oracle and DB2, enhancing efficiency for WebSphere applications.\n\nAutomated deployment processes using Unix shell scripting and Perl for both Unix and Windows environments.\n\nEngaged in unit testing, debugging, and version control using GitHub.\n\nExperienced in creating and maintaining Helm charts to package, configure, and deploy applications within Kubernetes clusters.\n\nDeveloped MVC-based applications with Java, Spring, and React, ensuring clean separation of concerns.\n\nAutomated unit testing for ElasticSearch modules, validating UI components using Kubernetes, Node.js, and Java.\n\nDeveloped RESTful APIs and consumed WSDL services using Java, ensuring secure data transactions on Tomcat and WebSphere.\n\nDesigned and managed cloud-based deployments within containerized environments to optimize resources and reduce costs.\n\nManaged version control using Git, SVN, and CVS across diverse development environments, including Windows, Unix, and z/OS.\n\nDesigned XML schemas (XSD) and performed XSLT transformations for seamless SOAP Web Service data exchanges.\n\n\n\nClient: SOMOS, East Brunswick, New Jersey\t\t\t\t                                        Sep 2023 - Feb 2024 \n\nRole: Lead Java Developer\n\n\n\nWorked with product owners to understand desired application capabilities and testing scenarios.\n\nArchitecting end-to-end solutions, I lead the team in developing Java-based applications tailored to meet specific business requirements.\n\nImplementing serverless computing with AWS Lambda, I orchestrate event-driven architectures for real-time processing.\n\nImplemented Terraform workflows using automation tools like Jenkins CI/CD pipelines to automate the provisioning, testing, and deployment of infrastructure changes.\n\nApplied Helm templating to dynamically configure and scale Kubernetes clusters for better performance.\n\nUtilized AWS CDK with Java for event-driven processing, creating functions and roles in AWS Lambda to execute Python scripts. Created Lambda jobs and set up roles using the Amazon CLI.\n\nEngaged in unit integration, resolving bugs, and conducting acceptance testing with test cases, alongside participating in code reviews. Additionally, authored JUnit tests for unit testing.\n\nEmployed the latest features in Java 17 streams API to perform efficient data processing and manipulation operations in the backend system.\n\nIntegrated PostgreSQL with Java applications using frameworks like JDBC, Hibernate, and Spring Data to ensure smooth database interactions.\n\nDeveloping dynamic web applications with real-time updates using React&#39;s virtual DOM and Java RESTful APIs.\n\nLead the development, implementation, integration, and testing using JavaScript, Java, Node, and Python.\n\nDesign microservices adhering to API-centric design principles and Implement applications using agile methodology.\n\nDeveloped operations and their respective handlers for interfacing with an Oracle database hosted on a Linux/Unix server.\n\nExpertise in deploying Java applications on cloud-based platforms like AWS and Azure for scalability and flexibility.\n\nDeveloped event-driven data processing by creating Lambda functions in Python and Java using AWS Lambda and CDK, and configured roles with AWS CLI to ensure secure execution.Used Amazon EKS to orchestrate and manage Java microservices, ensuring seamless deployment and scaling.\n\nUtilized Java 17&#39;s enhanced garbage collection algorithms and performance optimizations to achieve better throughput and lower latency.\n\nDeveloped applications with PostgreSQL, testing data integrity through SQL and PL/SQL queries for external REST API calls.\n\nIntegrating third-party APIs and services into React components to enhance functionality, such as payment gateways or social media APIs, alongside Java backend services.\n\nIntegrated Kafka with various AWS services such as Amazon EC2, Amazon S3, and Amazon Kinesis, allowing Java applications to ingest, process, and store streaming data efficiently.\n\nMentoring junior developers, I share knowledge and best practices to cultivate talent and promote professional growth.\n\nImplemented Terraform workspaces to manage multiple deployment environments with varying configurations, enabling streamlined testing and deployment processes.\n\nDeveloped reusable components and services in TypeScript to consume REST APIs, utilizing the component-based architecture of React.\n\nImplemented RESTful APIs using Spring Boot&#39;s MVC architecture to enable smooth communication between application components.\n\nIntegrated Spring Boot Actuator for efficient monitoring and management of application health and metrics.\n\nAutomated backup and disaster recovery processes using AWS Backup and Disaster Recovery services for Java applications on AWS.\n\nIntegrated Spring Boot Actuator with monitoring tools like Prometheus and Grafana for comprehensive application performance monitoring.\n\nUtilized React state management libraries like Redux for synchronized application state with Java backend data.\n\nDeveloped XML-based SOAP web services using WSDL protocols for seamless integration within the application architecture.\n\nSegmented development, staging, and production environments for Java applications using EKS namespaces, ensuring resource isolation and security.\n\nDesigned and implemented a scalable website architecture with real-time capabilities using Node.js, Socket.io, Redis, Supervisor, Grunt, and Angular.\n\nDesigned and consumed REST and SOAP API-based web services to enable sophisticated communication between application components.\n\nUtilized AWS RDS parameter groups to customize database engine configurations for Java applications, optimizing performance.\n\nLeveraged GraphQL to retrieve key-value pairs from a MongoDB NoSQL database and associate users with attributes for display on the platform chat.\n\nLed a database migration project to centralize multiple MySQL database instances into a single Amazon Aurora instance for improved efficiency.\n\nCreated SQL queries, PL/SQL Stored Procedures, and Functions for the Database layer, utilizing DB2 and JPA with Hibernate for efficient data access.\n\nDemonstrated proficiency in Java Multi-Threading and Concurrency for optimal performance in concurrent application environments.\n\nUtilized AWS RDS database migration tools to migrate on-premises databases to AWS RDS instances for Java applications.\n\nDeveloped comprehensive JUnit test cases to ensure application reliability and stability through automated testing.\n\nEstablished baselines for every release and monitored CI/CD issues until deployment to production for smooth releases.\n\nDeveloped Maven POM dependencies, plugins, and modules for efficient building of Wars and Zips using Jenkins Maven plugin integration.\n\nImplemented BDD and TDD test automation practices, integrating them with Jenkins for improved software quality.\n\nImplemented SQS for decoupled applications, facilitating efficient message handling and processing.\n\nPerformed data operations on DynamoDB using API Gateway requests, with Lambda functions executing calls to DynamoDB.\n\nImplemented Kubernetes resource quotas and limits to ensure fair resource allocation among Java applications.\n\nIntegrated Kubernetes with CI/CD pipelines to automate deployment and continuous delivery of Java applications.\n\nSet up servers on AWS, configured security groups, auto-scaling, load balancers, DNS management, and integrated SES and SNS within the designated VPC.\n\n\n\nClient: AutoZone, Memphis, TN\t\t\t\t\t\t\t\t                          Jan 2020 – Aug 2023\n\nRole: Senior Java Developer\n\n\n\nResponsibilities:\n\nDeveloped an Intranet Web Application using J2EE, JSP for UI, hibernate for database connectivity, and Rest services generated from Swagger2 specifications.\n\nCreated SOAP and WSDL Web Services for address validations, utilizing advanced Java API and core Java for complex business logic.\n\nEngaging in Agile methodologies, I facilitate sprint planning, retrospectives, and daily stand-ups to ensure efficient project execution.\n\nUtilized Java 17&#39;s enhanced support for foreign function and memory access (FFI) to integrate native code libraries seamlessly into the backend project.\n\nAccountable for conducting code reviews, devising testing approaches, and collaborating with the Business processes team and other development teams.\n\nUtilizing React Router for client-side routing in conjunction with Java-based server routing for a seamless navigation experience.\n\nDesigned and implemented a serverless microservice ETL application with AWS Lambda and S3 using AWS CDK, and built and deployed all necessary services using AWS Python CDK for source control.\n\nCreated reusable TypeScript components and services to interact with REST APIs using React&#39;s component-based architecture.\n\nImplementing AWS API Gateway, I create RESTful interfaces to enable seamless communication between Java applications and external systems.\n\nIntegrated EKS with Jenkins for continuous integration and continuous deployment of Java applications, automating build and deployment pipelines.\n\nManaged PostgreSQL Database on AWS RDS, ensuring efficient resource allocation.\n\nLed data migration, moving data to PostgreSQL from various sources, and integrating it with external systems via APIs and ETL procedures.\n\nIntegrated OAuth2.0 into our web app for authentication and accessed data services via their APIs.\n\nDesigned and developed Kafka consumers and producers in Java, facilitating asynchronous message processing and integration with AWS services like S3 and DynamoDB.\n\nImplemented reusable TypeScript components and services for consuming REST APIs.\n\nCreated technical designs, mapping documents, and report queries in Snowflake and Java based on provided metrics.\n\nEstablished an Automation Framework using Page Object Model (POM) with Eclipse, Java, Selenium WebDriver, TestNG, Maven, and Apache POI.\n\nUtilized Spring Boot Starter modules to simplify configuration and reduce setup time for databases, security, and messaging.\n\nImplemented scheduled tasks using Spring Boot&#39;s scheduling support for automated background processes and jobs.\n\nDeveloping real-time chat apps using React for the frontend and WebSocket communication with Java-based backend services.\n\nIntegrated React with Java-based testing frameworks like JUnit for comprehensive testing across the stack.\n\nTransitioned from Java Messaging Service (JMS) to AWS SQS, using the AWS SDK for streamlined bulk email processing.\n\nImplemented AWS Lambda for serverless architecture, triggering functions upon database updates, and used AWS CloudWatch for monitoring.\n\nConnected React frontend with Java 8 backend using RESTful APIs and CORS, developing web microservices for coupon management and validation.\n\nConducted code and test case reviews.\n\nOrchestrated Kafka Streams for real-time data transformation and analytics, enabling dynamic insights.\n\nIntegrated Spring Boot Actuator with ELK stack for centralized logging.\n\nTransitioned Terraform modules to CloudFormation templates for AWS deployments, with CloudWatch monitoring.\n\nSet up CI/CD system on Kubernetes with Jenkins, Docker for building, testing, deploying.\n\nImplemented OAuth2 for secure communication, automated Data Integrity testing with SQL, JDBC, Selenium.\n\nUtilized Selenium Grid for cross-platform testing, integrated Java 18 features like Lambda expressions and Streams.\n\nIntegrated Spring Boot with Elasticsearch, developed APIs, implemented message retry mechanism with RabbitMQ.\n\nImplemented authentication and authorization with Spring Security (LDAP, OAuth2, SAML, JWT).\n\nDeployed backup solutions with Microsoft Azure Recovery Services, built CI/CD pipelines with Jenkins and MongoDB Atlas.\n\nMigrated applications to AWS with NoSQL databases, configured RDS instances using CloudFormation and Terraform.\n\nDeveloped stored procedures/views in Snowflake, created AWS Lambda functions, and backend web services using Node.JS.\n\nMigrated modules from IBM MQ to Apache Kafka, developed Golang software for concurrent data processing.\n\nUsed Spring MVC repositories, Hibernate for database access, Docker for containerized environments.\n\nAutomated provisioning tasks with Terraform, Python, Docker, implemented Zuul proxy as API gateway.\n\nConducted unit testing with JUnit and Mockito, enhanced message persistence in RabbitMQ, utilized Docker for container management.\n\n\n\nClient: US Bank, LA, CA\t\t\t\t\t                                                                                       June 2017 – Dec 2019\n\nRole: Senior Full Stack Java Developer\n\n\n\nResponsibilities:\n\nUtilized Agile/Scrum methodologies for managing business requirements, creating Jira tickets for user stories.\n\nDeveloped business logic with Spring4 and persistence logic with Hibernate, integrated ReactJS components and concepts.\n\nImplemented Web Services using Spring Framework and Redux for state management alongside ReactJS.\n\nLeveraged Java8 features like Streams, Lambda Functions, and Functional Interfaces.\n\nDesigned and developed Kafka consumers and producers in Python, optimizing message handling and processing efficiency.\n\nBuilt web-based applications with ReactJS, hosted on NodeJS servers using Express middleware.\n\nImplemented AWS Code Pipeline and utilized Terraform for infrastructure as code.\n\nDeveloped front-end screens using React and MongoDB, designed, executed, and maintained Selenium WebDriver automated test cases.\n\nLeveraged Amazon Glue, S3, and DynamoDB to design a large-scale ETL application with AWS CDK.\n\nHandled exception handling, JUnit, and logging using Log4J, OAuth authentication using Spring OAuth.\n\nDeveloped business modules in Cobol/CICS/DB2 programs, deployed Microservice applications on AWS Stack.\n\nUtilized UNIX and Linux systems to transition the project into a production environment.\n\nDesigned Microservices architecture using Spring Boot, Rabbit MQ, MySQL, PostgreSQL, REST Web Services.\n\nDeveloped AWS SDK code for S3 storage, SQS for bulk email processing, DynamoDB for metrics, and backend reports.\n\nAutomated microservices deployment using Docker, Kubernetes, and Lambda for DynamoDB configuration.\n\nParticipated in the development of responsive Single Page Applications using AngularJS, HTML5, CSS3.\n\nConfigured local Maven repositories, Ant projects with Nexus repositories, scheduled projects in Jenkins for CI/CD.\n\nDeveloped Lambda APIs for AWS Gateway, fixed Python bug fixes for main applications.\n\nUtilized Jenkins pipelines for microservices builds, Docker registry deployment, Kubernetes management.\n\nCreated and configured Microservices architecture integrated with React JS, managed user credentials with Amazon IAM.\n\nUsed Amazon S3 for media storage, CloudWatch for monitoring, designed security architecture with Spring LDAP.\n\nManaged Restful web services response data via XML, SOAP, and JSON, developed Restful web services for UI integration.\n\n\n\nClient: Toyota, Plano, TX\t\t\t\t\t\t                                                                        Jan 2015 – May 2017\n\nRole: Java Developer\n\n\n\nResponsibilities:\n\nParticipated in all phases of the SDLC, including analysis, specification, design, implementation, and testing, based on functional requirements.\n\nDesigned use cases, sequence and class diagrams, activities, states, objects, and components using UML (MS Visio) for software design.\n\nEmployed Hibernate for storing persistent data in PostgreSQL and utilized HQL for database access.\n\nApplied GUI design with JavaScript, HTML, DHTML, CSS, Servlets, and JSP in an AGILE framework.\n\nBuilt applications using Spring MVC Architecture with Hibernate, integrating React.JS for object-oriented JavaScript.\n\nDeveloped XML processing components, SQL queries, and utilized REST for reports.\n\nEmployed AngularJS for data binding, created REST APIs, managed SOAP XML, and handled API management.\n\nAutomated Terraform scripts with Jenkins, utilized Streams, Lambda expressions in Java 8 for processing.\n\nImplemented Stored Procedures, Triggers on Oracle, client-side interface with React.JS.\n\nCreated a Command line tool in Golang for RESTful APIs, deployed drools rules in J2EE.\n\nDesigned and implemented an End to End customer self-service module with Spring Boot, Hibernate, Java5, and jQuery.\n\nDeveloped Rest API for data processing, utilized Servlets, Java Bean for client-server communication.\n\nImplemented SOAP Web services using Apache CXF, employed Log4j, Maven for efficient logging and build.\n\nWrote JUnit test cases, collaborated with QA team for bug tracking, and contributed to application development and fixing production issues.\n\n\n\n\n\nClient: HDS, Chattanooga, TN                                                                                                                                                     June 2012 – Dec 2014\n\nRole: Software Developer\n\n\n\nResponsibilities:\n\nContributed to app architecture design, using MVC2 with JSP, Servlets, EJBs, and Java classes.\n\nDeveloped REST validation module with SQL/PLSQL for various databases.\n\nUtilized Entity Beans, SOAP, Spring MVC for web design.\n\nIntegrated Measures Module, REST API warehouse processor with Spring and Hibernate.\n\nOrchestrated Kafka Streams for real-time data transformation.\n\nDeveloped Golang Microservices, ANT scripts, implemented JUnit tests.\n\nManaged S3 buckets, used JUnit, Jakarta commons logging, ANT, SVN, Install Shield.\n\nDesigned Java Objects, JSP, JSF, JavaBeans, Servlets with client-side validations.\n\nDeveloped classes/interfaces for web services, prepared documentation.\n\nCreated Use Cases, Business Process Models, Data flow diagrams, UI models.\n\nDefined business processes, gave technical direction, analyzed legacy systems, Financial Data Warehouse.\n\nParticipated in database design sessions, normalization meetings.\n\nEDUCATION: \n\n\n\nBachelor’s in Computer Science from Tribhuvan University, Nepal 2011\n\n","fileName":null,"uploadedAt":"2025-05-06T03:54:49.301Z"}}