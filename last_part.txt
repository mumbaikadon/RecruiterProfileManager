      }
      
      // Import the sanitization utility
      const { sanitizeHtml } = await import('./utils');
      
      // Sanitize both the resume text and job description
      const sanitizedResumeText = sanitizeHtml(resumeText);
      const sanitizedJobDescription = sanitizeHtml(jobDescription);
      
      console.log("Match resume request received:");
      console.log("- Resume text length:", sanitizedResumeText.length);
      console.log("- Job description length:", sanitizedJobDescription.length);
      
      const matchResult = await matchResumeToJob(sanitizedResumeText, sanitizedJobDescription);
      
      // Ensure we return a properly structured response even if the matching service fails
      const response = {
        score: typeof matchResult.score === 'number' ? matchResult.score : 0,
        strengths: Array.isArray(matchResult.strengths) ? matchResult.strengths : [],
        weaknesses: Array.isArray(matchResult.weaknesses) ? matchResult.weaknesses : [],
        suggestions: Array.isArray(matchResult.suggestions) ? matchResult.suggestions : []
      };
      
      res.json(response);
    } catch (error) {
      console.error("Resume matching error:", error);
      // Return a structured error response with 0 score
      res.status(200).json({ 
        message: (error as Error).message,
        score: 0,
        strengths: [],
        weaknesses: ["Error occurred during matching"],
        suggestions: ["Try a different resume format or contact support"]
      });
    }
  });
  
  // Initialize the HTTP server
  const httpServer = createServer(app);
  return httpServer;
}

  // Resume file download endpoint
  app.get("/api/candidates/:id/resume", async (req: Request, res: Response) => {
    try {
      const candidateId = parseInt(req.params.id);
      if (isNaN(candidateId)) {
        return res.status(400).json({ error: "Invalid candidate ID" });
      }
      
      // Get the resume data
      const resumeData = await storage.getResumeData(candidateId);
      if (!resumeData) {
        return res.status(404).json({ error: "Resume not found" });
      }
      
      // Check if file exists in the resume data
      if (!resumeData.fileName) {
        return res.status(404).json({ error: "Resume file not available" });
      }
      
      // For a simplified test, return a PDF or DOCX file directly
      const fileName = resumeData.fileName;
      
      // Set appropriate content type based on file name
      let contentType = "application/octet-stream";
      if (fileName.endsWith(".pdf")) {
        contentType = "application/pdf";
      } else if (fileName.endsWith(".docx") || fileName.endsWith(".doc")) {
        contentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
      }
      
      // Get the actual resume file (in a real system, this would be read from storage)
      // Here we're just sending the attached resume from the assets folder
      const filePath = `./attached_assets/${fileName}`;
      
      // Check if the file exists
      if (!fs.existsSync(filePath)) {
        // Fall back to the first DOCX resume in the assets folder
        const assetFiles = fs.readdirSync('./attached_assets');
        const docxFiles = assetFiles.filter(file => file.endsWith('.docx'));
        
        if (docxFiles.length === 0) {
          return res.status(404).json({ error: "Resume file not found" });
        }
        
        // Use the first available DOCX file
        return res.download(`./attached_assets/${docxFiles[0]}`, fileName);
      }
      
      // Send file
      return res.download(filePath);
    } catch (error) {
      console.error("Error downloading resume:", error);
      return res.status(500).json({ 
        error: "Failed to download resume file",
        details: error instanceof Error ? error.message : String(error)
      });
    }
  });
